pipeline {
    agent { label 'usla-jknd-p004' }

    environment {
        BRANCH_NAME = "${env.BRANCH}"
        TRIGGER_AT = "${env.triggerAT}"
        DEPLOY_DEV = "${env.deployDev}"
        DEPLOY_QA = "${env.deployQa}"
        CREATE_AND_PUSH_DOCKER = "${env.createAndPublishDocker}"
    }

    stages {
        stage('Setup Workspace') {
            steps {
                echo '*** Printing Parameters ***'
                echo BRANCH_NAME
                echo TRIGGER_AT
                echo DEPLOY_DEV
                echo DEPLOY_QA
                echo CREATE_AND_PUSH_DOCKER
                sh 'rm -Rf node_modules'
                sh 'rm -Rf dist'

            }
        }
        stage('Versioning') {
            steps {
                script {
                    //TODO: To retrieve this from package.json
                    PORTAL_VERSION = '1.0.0'
                    // define the version based on the branch(master/release/feature)
                    VERSIONING_BRANCH = ''
                    // the result version for this build - date.npm_version-branch.build_number
                    BUILD_VERSION = ''
                    if (BRANCH_NAME == 'refs/heads/master' || BRANCH_NAME.contains('origin/master')) {
                        VERSIONING_BRANCH = 'master'
                        BUILD_VERSION = PORTAL_VERSION + '-' + VERSIONING_BRANCH + '.' + BUILD_NUMBER
                    }
                    // if release, concat release number with Build Number
                    // i.e refs/heads/release/16.0 -> 1.0.0-r16.0.191
                    else if (BRANCH_NAME.contains('refs/heads/release') || BRANCH_NAME.contains('origin/release')) {
                        releaseId = BRANCH_NAME.substring(BRANCH_NAME.lastIndexOf('/') + 1, BRANCH_NAME.length())
                        VERSIONING_BRANCH = 'r' + releaseId
                        BUILD_VERSION = PORTAL_VERSION + '-' + VERSIONING_BRANCH
                    }
                    // if feature branch, concat feature ID with Build Number
                    // i.e refs/heads/feature/VBQT-545 -> 1.0.0-f545.191
                    else if (BRANCH_NAME.contains('refs/heads/feature') || BRANCH_NAME.contains('origin/feature')) {
                        featureId = BRANCH_NAME.substring(BRANCH_NAME.lastIndexOf('-') + 1, BRANCH_NAME.length())
                        VERSIONING_BRANCH = 'f' + featureId
                        BUILD_VERSION = PORTAL_VERSION + '-' + VERSIONING_BRANCH + '.' + BUILD_NUMBER
                    }

                    sh "npm version $BUILD_VERSION --no-git-tag-version"
                }
            }
        }
        stage('Installing Dependencies') {
            steps {
                sh 'yarn'
            }
        }
        stage('Running Linter') {
            steps {
                sh 'yarn run lint'
            }
        }
        stage('Building Packages') {
            steps {
                sh 'yarn prebuild'
            }
        }
        stage('Building Portal') {
            steps {
                sh 'yarn build:prod'
            }
        }
        stage('Running Tests') {
            steps {
                sh 'yarn test'
            }
        }
        stage('Docker') {
            steps {
                script {
                    // if the branch is origin/master, any 'release/*' or any 'feature/*' branch
                    if (BRANCH_NAME == 'refs/heads/master' || BRANCH_NAME.contains('origin/master')
                        || BRANCH_NAME.contains('refs/heads/release') || BRANCH_NAME.contains('origin/release')
                        || BRANCH_NAME.contains('refs/heads/feature') || BRANCH_NAME.contains('origin/feature')) {
                        // if flag for createAndPublishDocker is true
                        if (CREATE_AND_PUSH_DOCKER.toBoolean()) {
                            // create tag for image
                            echo 'Branch detected - creating and pushing docker image'
                            imageTag = ''
                            tagTime = sh(returnStdout: true, script: 'echo $(date +%Y%m%d)').trim()
                            imageTag = "${tagTime}.${BUILD_VERSION}"
                            echo 'Portal UI Current Version: '
                            echo imageTag
                            // push to nexus the new docker image
                            sh "docker build -t nexus.vubiquity.com:8445/portal:${imageTag} ."
                            sh "docker push nexus.vubiquity.com:8445/portal:${imageTag}"
                        } else {
                            echo 'Docker creation and pushing not selected for this build'
                        }

                    } else {
                        echo 'Not master/release/feature branch, skipping creating docker image'
                        echo BRANCH_NAME
                    }
                }
            }
        }
        stage('Triggering AT') {
            steps {
                script {
                    if (TRIGGER_AT.toBoolean()) {
                        echo 'Triggering Automation . . .'
                        if (BRANCH_NAME == 'refs/heads/master' || BRANCH_NAME.contains('origin/master')
                            || BRANCH_NAME.contains('refs/heads/release') || BRANCH_NAME.contains('origin/release')
                            || BRANCH_NAME.contains('refs/heads/feature') || BRANCH_NAME.contains('origin/feature')) {
                            echo 'Master/Release/Feature Branch detected - Triggering AT'
                            build job: 'portal-ui-at', parameters: [
                                string(name: 'imageTag', value: imageTag),
                                [$class: 'BooleanParameterValue', name: 'deployAndRunOnDev', value: false],
                                [$class: 'BooleanParameterValue', name: 'deployAndRunOnQa', value: false],
                                [$class: 'BooleanParameterValue', name: 'runOnDev', value: false],
                                [$class: 'BooleanParameterValue', name: 'runOnQA', value: false]
                            ], wait: true

                        } else {
                            echo 'Not master/release/feature branch, skipping AT'
                            echo BRANCH_NAME
                        }
                    } else {
                        echo 'AT not selected for this build'
                    }
                }
            }
        }
        stage('Triggering CD') {
            steps {
                script {
                    if (DEPLOY_DEV.toBoolean() || DEPLOY_QA.toBoolean()) {
                        echo 'Triggering Deployment . . .'
                        if (BRANCH_NAME == 'refs/heads/master' || BRANCH_NAME.contains('origin/master')
                            || BRANCH_NAME.contains('refs/heads/release') || BRANCH_NAME.contains('origin/release')
                            || BRANCH_NAME.contains('refs/heads/feature') || BRANCH_NAME.contains('origin/feature')) {
                            echo 'Deploying using BRANCH_NAME'
                            if (!imageTag.isEmpty() || !CREATE_AND_PUSH_DOCKER.toBoolean()) {
                                if (DEPLOY_DEV.toBoolean()) {
                                    echo 'Triggering CD to Environment: DEV'
                                    build job: 'portal-ui-cd', parameters: [
                                        string(name: 'imageTag', value: imageTag),
                                        [$class: 'BooleanParameterValue', name: 'deployDev', value: true],
                                        [$class: 'BooleanParameterValue', name: 'deployQa', value: false],
                                    ], wait: true
                                }
                                if (DEPLOY_QA.toBoolean()) {
                                    echo 'Triggering CD to Environment: QA'
                                    build job: 'portal-ui-cd', parameters: [
                                        string(name: 'imageTag', value: imageTag),
                                        [$class: 'BooleanParameterValue', name: 'deployDev', value: false],
                                        [$class: 'BooleanParameterValue', name: 'deployQa', value: true],
                                    ], wait: true
                                }
                            } else {
                                echo 'Docker Image not created for this build, skipping Deployment'
                            }
                        } else {
                            echo 'Not a valid branch(master/release/feature), skipping Deployment'
                            echo BRANCH_NAME
                        }
                    } else {
                        echo 'CD not selected for this build'
                    }
                }
            }
        }
    }
    post {
        success {
            sh 'echo Finished Successfully'
        }
        failure {
            mail to: 'mcharalambous@vubiquity.net, anikolaou@vubiquity.net, PDemetriou@vubiquity.net, Miroslav.Sabev@vubiquity.net, elyashenko@vubiquity.net', subject: "CB FAILED - ${env.BUILD_DISPLAY_NAME}", body: "Reason: Please check job for more information. \nBuild: ${env.BUILD_TAG} failed. \n\nBuild URL: ${env.BUILD_URL}"
        }
    }
}
