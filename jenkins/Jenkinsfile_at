pipeline {
    agent { label 'usla-jknd-p004' }

    environment {
        IMAGE_TAG = "${env.imageTag}"
        DEPLOY_AND_RUN_ON_DEV = "${env.deployAndRunOnDev}"
        DEPLOY_AND_RUN_ON_QA = "${env.deployAndRunOnQa}"
        RUN_ON_DEV = "${env.runOnDev}"
        RUN_ON_QA = "${env.runOnQA}"
    }

    stages {
        stage('Setup parameters') {
            steps {
                script {
                    // if deploying but no imageTag input, throw error
                    if (!RUN_ON_DEV.toBoolean() || !RUN_ON_QA.toBoolean()) {
                        // check if deployment is needed, make sure imageTag is there
                        if((DEPLOY_AND_RUN_ON_DEV.toBoolean() || DEPLOY_AND_RUN_ON_QA.toBoolean()) && env.imageTag.isEmpty()) {
                            echo 'imageTag is empty - Needed for Deployment'
                            error("ERROR: Build failed because of no imageTag input for running AT with deployment..")
                        }
                    }
                }
            }
        }
        stage('Deployment') {
            steps {
                script {
                    if (DEPLOY_AND_RUN_ON_DEV.toBoolean() && !IMAGE_TAG.isEmpty()) {
                        echo 'Deploying to DEV Environment ...'
                        // deploy to DEV
                        build job: 'portal-ui-cd', parameters: [
                            string(name: 'imageTag', value: IMAGE_TAG),
                            [$class: 'BooleanParameterValue', name: 'deployDev', value: true],
                            [$class: 'BooleanParameterValue', name: 'deployQa', value: false],
                        ], wait: true
                    }
                    if (DEPLOY_AND_RUN_ON_QA.toBoolean() && !IMAGE_TAG.isEmpty()) {
                        echo 'Deploying to QA Environment ...'
                        // deploy to QA
                        build job: 'portal-ui-cd', parameters: [
                            string(name: 'imageTag', value: IMAGE_TAG),
                            [$class: 'BooleanParameterValue', name: 'deployDev', value: false],
                            [$class: 'BooleanParameterValue', name: 'deployQa', value: true],
                        ], wait: true
                    }
                }
            }
        }
        stage('UISanityTests Pipeline') {
            steps {
                script {
                    if (DEPLOY_AND_RUN_ON_DEV.toBoolean() || RUN_ON_DEV.toBoolean()) {
                        build job: 'LTP/DEV/Sanity/UISanityTests', wait: true
                    }
                    if (DEPLOY_AND_RUN_ON_QA.toBoolean() || RUN_ON_QA.toBoolean()) {
                        build job: 'LTP/QA/Sanity/UISanityTests', wait: true
                    }
                }
            }
        }
    }
    post {
        success {
            sh 'echo Finished Successfully'
        }
        failure {
            script {
                if (RUN_ON_DEV.toBoolean() || DEPLOY_AND_RUN_ON_DEV.toBoolean()) {
                    mail to: "mcharalambous@vubiquity.net, anikolaou@vubiquity.net, PDemetriou@vubiquity.net, Miroslav.Sabev@vubiquity.net, elyashenko@vubiquity.net",cc: "Vaishali.Tiwari@vubiquity.net, ekampouri@vubiquity.net, marios.georgiou@vubiquity.net, gunjan.garg@vubiquity.net",subject: "AT FAILED on DEV - ${env.BUILD_DISPLAY_NAME}",body: "ENV: DEV \nReason: Please check job for more information. \nBuild: ${env.BUILD_TAG} failed. \n\nBuild URL: ${env.BUILD_URL}"
                } else if (RUN_ON_QA.toBoolean() || DEPLOY_AND_RUN_ON_QA.toBoolean()) {
                    mail to: "mcharalambous@vubiquity.net, anikolaou@vubiquity.net, PDemetriou@vubiquity.net, Miroslav.Sabev@vubiquity.net, elyashenko@vubiquity.net",cc: "Vaishali.Tiwari@vubiquity.net, ekampouri@vubiquity.net, marios.georgiou@vubiquity.net, gunjan.garg@vubiquity.net",subject: "AT FAILED on QA - ${env.BUILD_DISPLAY_NAME}",body: "ENV: QA \nReason: Please check job for more information. \nBuild: ${env.BUILD_TAG} failed. \n\nBuild URL: ${env.BUILD_URL}"
                }
            }
        }
    }
}
