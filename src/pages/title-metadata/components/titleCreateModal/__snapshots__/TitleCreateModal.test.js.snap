// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TitleCreateModal Default TitleCreateModal should match snapshot 1`] = `
<Dialog
  __TYPE="Dialog"
  appendTo={null}
  ariaCloseIconLabel="Close"
  baseZIndex={0}
  blockScroll={false}
  breakpoints={null}
  className="nexus-c-title-create_dialog"
  closable={false}
  closeOnEscape={false}
  contentClassName={null}
  contentStyle={null}
  dismissableMask={false}
  draggable={true}
  focusOnShow={true}
  footer={
    <div
      className="nexus-c-title-create_footer-container"
    >
      <div
        className="nexus-c-title-create_footer-buttons-container"
      >
        <Memo(Button)
          __TYPE="Button"
          badge={null}
          badgeClassName={null}
          className="p-button-outlined p-button-secondary"
          disabled={false}
          icon={null}
          iconPos="left"
          id="titleCancelBtn"
          label="Cancel"
          loading={false}
          loadingIcon="pi pi-spinner pi-spin"
          onClick={[Function]}
          tooltip={null}
          tooltipOptions={null}
        />
        <Memo(Button)
          __TYPE="Button"
          badge={null}
          badgeClassName={null}
          className="p-button-outlined"
          disabled={false}
          icon={null}
          iconPos="right"
          id="titleSaveBtn"
          label="Save"
          loading={false}
          loadingIcon="pi pi-spin pi-spinner"
          onClick={[Function]}
          tooltip={null}
          tooltipOptions={null}
        />
      </div>
    </div>
  }
  header="Create Title"
  headerClassName={null}
  headerStyle={null}
  icons={null}
  id={null}
  keepInViewport={true}
  maskClassName={null}
  maskStyle={null}
  maximizable={false}
  maximized={false}
  minX={0}
  minY={0}
  modal={true}
  onClick={null}
  onDrag={null}
  onDragEnd={null}
  onDragStart={null}
  onHide={[Function]}
  onMaskClick={null}
  onMaximize={null}
  onResize={null}
  onResizeEnd={null}
  onResizeStart={null}
  onShow={null}
  position="center"
  resizable={true}
  rtl={false}
  showHeader={true}
  style={
    Object {
      "width": "50vw",
    }
  }
  transitionOptions={null}
  visible={true}
>
  <Component
    clearErrors={[Function]}
    control={
      Object {
        "_defaultValues": Object {
          "catalogueOwner": "vu",
          "contentSubtype": null,
          "contentType": null,
          "releaseYear": "",
          "title": "",
        },
        "_executeSchema": [Function],
        "_fields": Object {},
        "_formState": Object {
          "dirtyFields": Object {},
          "errors": Object {},
          "isDirty": false,
          "isSubmitSuccessful": false,
          "isSubmitted": false,
          "isSubmitting": false,
          "isValid": false,
          "isValidating": false,
          "submitCount": 0,
          "touchedFields": Object {},
        },
        "_formValues": Object {
          "catalogueOwner": "vu",
          "contentSubtype": null,
          "contentType": null,
          "releaseYear": "",
          "title": "",
        },
        "_getDirty": [Function],
        "_getFieldArray": [Function],
        "_getWatch": [Function],
        "_names": Object {
          "array": Set {},
          "mount": Set {},
          "unMount": Set {},
          "watch": Set {},
        },
        "_options": Object {
          "defaultValues": Object {
            "catalogueOwner": "vu",
            "contentSubtype": null,
            "contentType": null,
            "releaseYear": "",
            "title": "",
          },
          "mode": "all",
          "reValidateMode": "onChange",
          "shouldFocusError": true,
        },
        "_proxyFormState": Object {
          "dirtyFields": false,
          "errors": "all",
          "isDirty": false,
          "isValid": "all",
          "isValidating": false,
          "touchedFields": false,
        },
        "_removeUnmounted": [Function],
        "_stateFlags": Object {
          "action": false,
          "mount": true,
          "watch": false,
        },
        "_subjects": Object {
          "array": Object {
            "next": [Function],
            "observers": Array [],
            "subscribe": [Function],
            "unsubscribe": [Function],
          },
          "state": Object {
            "next": [Function],
            "observers": Array [
              Object {
                "next": [Function],
              },
            ],
            "subscribe": [Function],
            "unsubscribe": [Function],
          },
          "watch": Object {
            "next": [Function],
            "observers": Array [],
            "subscribe": [Function],
            "unsubscribe": [Function],
          },
        },
        "_updateFieldArray": [Function],
        "_updateValid": [Function],
        "getFieldState": [Function],
        "register": [Function],
        "unregister": [Function],
      }
    }
    formState={Object {}}
    getFieldState={[Function]}
    getValues={[Function]}
    handleSubmit={[Function]}
    register={[Function]}
    reset={[Function]}
    resetField={[Function]}
    setError={[Function]}
    setFocus={[Function]}
    setValue={[Function]}
    trigger={[Function]}
    unregister={[Function]}
    watch={[Function]}
  >
    <form
      onSubmit={[Function]}
    >
      <div
        className="row"
      >
        <div
          className="col-12"
        >
          <div
            className="row nexus-c-create-title-overview-header"
          >
            <div
              className="col-12"
            >
              <NexusEntity
                actions={Array []}
                disableHover={false}
                flag1=""
                flag2=""
                heading="OVERVIEW"
                isActive={false}
                tag=""
                type="subsection"
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-12 nexus-c-title-create_input-wrapper"
            >
              <InputText
                className="nexus-c-title-create_input"
                formControlOptions={
                  Object {
                    "formControlName": "title",
                    "rules": Object {
                      "maxLength": Object {
                        "message": "Max title length is 250!",
                        "value": 250,
                      },
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="title"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Title",
                    "stacked": true,
                  }
                }
                placeholder="Enter Title"
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-lg-6 col-sm-12"
            >
              <Dropdown
                className="nexus-c-title-create_input-dropdown"
                disabled={false}
                formControlOptions={
                  Object {
                    "formControlName": "contentType",
                    "rules": Object {
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="contentType"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Content Type",
                    "shouldUpper": true,
                    "stacked": true,
                  }
                }
                options={Array []}
                placeholder="Select a Content Type"
              />
            </div>
            <div
              className="col-lg-6 col-sm-12"
            >
              <Dropdown
                className="nexus-c-title-create_input-dropdown"
                formControlOptions={
                  Object {
                    "formControlName": "contentSubtype",
                    "rules": Object {
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="contentSubtype"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Content Subtype",
                    "shouldUpper": true,
                    "stacked": true,
                  }
                }
                options={Array []}
                placeholder="Select a Content Sub Type"
                value={null}
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-lg-6 col-sm-12"
            >
              <InputText
                className="nexus-c-title-create_input"
                formControlOptions={
                  Object {
                    "formControlName": "releaseYear",
                    "rules": Object {
                      "maxLength": Object {
                        "message": "Max release year length is 4!",
                        "value": 4,
                      },
                      "minLength": Object {
                        "message": "Min release year length is 4!",
                        "value": 4,
                      },
                      "pattern": Object {
                        "message": "Please enter a valid year!",
                        "value": /\\^\\[0-9\\]\\+\\$/,
                      },
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="titleReleaseYear"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Release Year",
                    "stacked": true,
                  }
                }
                placeholder="Enter Release Year"
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-12"
            >
              <ExternalIDsSection
                control={
                  Object {
                    "_defaultValues": Object {
                      "catalogueOwner": "vu",
                      "contentSubtype": null,
                      "contentType": null,
                      "releaseYear": "",
                      "title": "",
                    },
                    "_executeSchema": [Function],
                    "_fields": Object {},
                    "_formState": Object {
                      "dirtyFields": Object {},
                      "errors": Object {},
                      "isDirty": false,
                      "isSubmitSuccessful": false,
                      "isSubmitted": false,
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "submitCount": 0,
                      "touchedFields": Object {},
                    },
                    "_formValues": Object {
                      "catalogueOwner": "vu",
                      "contentSubtype": null,
                      "contentType": null,
                      "releaseYear": "",
                      "title": "",
                    },
                    "_getDirty": [Function],
                    "_getFieldArray": [Function],
                    "_getWatch": [Function],
                    "_names": Object {
                      "array": Set {},
                      "mount": Set {},
                      "unMount": Set {},
                      "watch": Set {},
                    },
                    "_options": Object {
                      "defaultValues": Object {
                        "catalogueOwner": "vu",
                        "contentSubtype": null,
                        "contentType": null,
                        "releaseYear": "",
                        "title": "",
                      },
                      "mode": "all",
                      "reValidateMode": "onChange",
                      "shouldFocusError": true,
                    },
                    "_proxyFormState": Object {
                      "dirtyFields": false,
                      "errors": "all",
                      "isDirty": false,
                      "isValid": "all",
                      "isValidating": false,
                      "touchedFields": false,
                    },
                    "_removeUnmounted": [Function],
                    "_stateFlags": Object {
                      "action": false,
                      "mount": true,
                      "watch": false,
                    },
                    "_subjects": Object {
                      "array": Object {
                        "next": [Function],
                        "observers": Array [],
                        "subscribe": [Function],
                        "unsubscribe": [Function],
                      },
                      "state": Object {
                        "next": [Function],
                        "observers": Array [
                          Object {
                            "next": [Function],
                          },
                        ],
                        "subscribe": [Function],
                        "unsubscribe": [Function],
                      },
                      "watch": Object {
                        "next": [Function],
                        "observers": Array [],
                        "subscribe": [Function],
                        "unsubscribe": [Function],
                      },
                    },
                    "_updateFieldArray": [Function],
                    "_updateValid": [Function],
                    "getFieldState": [Function],
                    "register": [Function],
                    "unregister": [Function],
                  }
                }
                errors={Object {}}
                externalDropdownOptions={Object {}}
                register={[Function]}
              />
            </div>
          </div>
          <Restricted
            resource="publishTitleMetadata"
          >
            <div
              className="nexus-c-title-create_checkbox-container"
            >
              <div
                className="row nexus-c-create-title-publish-header"
              >
                <div
                  className="col-12"
                >
                  <NexusEntity
                    actions={Array []}
                    disableHover={false}
                    flag1=""
                    flag2=""
                    heading="PUBLISH"
                    isActive={false}
                    tag=""
                    type="subsection"
                  />
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col nexus-c-title-create_checkbox-wrapper"
                >
                  <Checkbox
                    className="nexus-c-title-create_checkbox"
                    formControlOptions={
                      Object {
                        "formControlName": "syncVZ",
                      }
                    }
                    id="syncVZ"
                    inputId="syncVZ"
                    labelPosition="right"
                    labelProps={
                      Object {
                        "label": "Publish to VZ and Movida Int\`l",
                        "shouldUpper": true,
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col nexus-c-title-create_checkbox-wrapper"
                >
                  <Checkbox
                    className="nexus-c-title-create_checkbox"
                    formControlOptions={
                      Object {
                        "formControlName": "syncMovida",
                      }
                    }
                    id="syncMovida"
                    inputId="syncMovida"
                    labelPosition="right"
                    labelProps={
                      Object {
                        "label": "Publish to Movida",
                        "shouldUpper": true,
                      }
                    }
                  />
                </div>
              </div>
            </div>
          </Restricted>
        </div>
      </div>
    </form>
  </Component>
</Dialog>
`;

exports[`TitleCreateModal Matching TitleCreateModal should match snapshot 1`] = `
<Dialog
  __TYPE="Dialog"
  appendTo={null}
  ariaCloseIconLabel="Close"
  baseZIndex={0}
  blockScroll={false}
  breakpoints={null}
  className="nexus-c-title-create_dialog"
  closable={false}
  closeOnEscape={false}
  contentClassName={null}
  contentStyle={null}
  dismissableMask={false}
  draggable={true}
  focusOnShow={true}
  footer={
    <div
      className="nexus-c-title-create_footer-container"
    >
      <div
        className="nexus-c-title-create_footer-buttons-container"
      >
        <Memo(Button)
          __TYPE="Button"
          badge={null}
          badgeClassName={null}
          className="p-button-outlined p-button-secondary"
          disabled={false}
          icon={null}
          iconPos="left"
          id="titleCancelBtn"
          label="Cancel"
          loading={false}
          loadingIcon="pi pi-spinner pi-spin"
          onClick={[Function]}
          tooltip={null}
          tooltipOptions={null}
        />
        <Memo(Button)
          __TYPE="Button"
          badge={null}
          badgeClassName={null}
          className="p-button-outlined"
          disabled={false}
          icon={null}
          iconPos="right"
          id="titleSaveBtn"
          label="Match & Create"
          loading={false}
          loadingIcon="pi pi-spin pi-spinner"
          onClick={[Function]}
          tooltip={null}
          tooltipOptions={null}
        />
      </div>
    </div>
  }
  header="Create Title"
  headerClassName={null}
  headerStyle={null}
  icons={null}
  id={null}
  keepInViewport={true}
  maskClassName={null}
  maskStyle={null}
  maximizable={false}
  maximized={false}
  minX={0}
  minY={0}
  modal={true}
  onClick={null}
  onDrag={null}
  onDragEnd={null}
  onDragStart={null}
  onHide={[Function]}
  onMaskClick={null}
  onMaximize={null}
  onResize={null}
  onResizeEnd={null}
  onResizeStart={null}
  onShow={null}
  position="center"
  resizable={true}
  rtl={false}
  showHeader={true}
  style={
    Object {
      "width": "50vw",
    }
  }
  transitionOptions={null}
  visible={true}
>
  <Component
    clearErrors={[Function]}
    control={
      Object {
        "_defaultValues": Object {
          "catalogueOwner": undefined,
          "contentSubtype": null,
          "contentType": null,
          "releaseYear": "",
          "title": "",
        },
        "_executeSchema": [Function],
        "_fields": Object {},
        "_formState": Object {
          "dirtyFields": Object {},
          "errors": Object {},
          "isDirty": false,
          "isSubmitSuccessful": false,
          "isSubmitted": false,
          "isSubmitting": false,
          "isValid": false,
          "isValidating": false,
          "submitCount": 0,
          "touchedFields": Object {},
        },
        "_formValues": Object {
          "catalogueOwner": undefined,
          "contentSubtype": null,
          "contentType": null,
          "releaseYear": "",
          "title": "",
        },
        "_getDirty": [Function],
        "_getFieldArray": [Function],
        "_getWatch": [Function],
        "_names": Object {
          "array": Set {},
          "mount": Set {},
          "unMount": Set {},
          "watch": Set {},
        },
        "_options": Object {
          "defaultValues": Object {
            "catalogueOwner": undefined,
            "contentSubtype": null,
            "contentType": null,
            "releaseYear": "",
            "title": "",
          },
          "mode": "all",
          "reValidateMode": "onChange",
          "shouldFocusError": true,
        },
        "_proxyFormState": Object {
          "dirtyFields": false,
          "errors": "all",
          "isDirty": false,
          "isValid": "all",
          "isValidating": false,
          "touchedFields": false,
        },
        "_removeUnmounted": [Function],
        "_stateFlags": Object {
          "action": false,
          "mount": true,
          "watch": false,
        },
        "_subjects": Object {
          "array": Object {
            "next": [Function],
            "observers": Array [],
            "subscribe": [Function],
            "unsubscribe": [Function],
          },
          "state": Object {
            "next": [Function],
            "observers": Array [
              Object {
                "next": [Function],
              },
            ],
            "subscribe": [Function],
            "unsubscribe": [Function],
          },
          "watch": Object {
            "next": [Function],
            "observers": Array [],
            "subscribe": [Function],
            "unsubscribe": [Function],
          },
        },
        "_updateFieldArray": [Function],
        "_updateValid": [Function],
        "getFieldState": [Function],
        "register": [Function],
        "unregister": [Function],
      }
    }
    formState={Object {}}
    getFieldState={[Function]}
    getValues={[Function]}
    handleSubmit={[Function]}
    register={[Function]}
    reset={[Function]}
    resetField={[Function]}
    setError={[Function]}
    setFocus={[Function]}
    setValue={[Function]}
    trigger={[Function]}
    unregister={[Function]}
    watch={[Function]}
  >
    <form
      onSubmit={[Function]}
    >
      <div
        className="row"
      >
        <div
          className="col-12"
        >
          <div
            className="row nexus-c-create-title-overview-header"
          >
            <div
              className="col-12"
            >
              <NexusEntity
                actions={Array []}
                disableHover={false}
                flag1=""
                flag2=""
                heading="OVERVIEW"
                isActive={false}
                tag=""
                type="subsection"
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-12 nexus-c-title-create_input-wrapper"
            >
              <InputText
                className="nexus-c-title-create_input"
                formControlOptions={
                  Object {
                    "formControlName": "title",
                    "rules": Object {
                      "maxLength": Object {
                        "message": "Max title length is 250!",
                        "value": 250,
                      },
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="title"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Title",
                    "stacked": true,
                  }
                }
                placeholder="Enter Title"
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-lg-6 col-sm-12"
            >
              <Dropdown
                className="nexus-c-title-create_input-dropdown"
                disabled={true}
                formControlOptions={
                  Object {
                    "formControlName": "contentType",
                    "rules": Object {
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="contentType"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Content Type",
                    "shouldUpper": true,
                    "stacked": true,
                  }
                }
                options={Array []}
                placeholder="Select a Content Type"
              />
            </div>
            <div
              className="col-lg-6 col-sm-12"
            >
              <Dropdown
                className="nexus-c-title-create_input-dropdown"
                formControlOptions={
                  Object {
                    "formControlName": "contentSubtype",
                    "rules": Object {
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="contentSubtype"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Content Subtype",
                    "shouldUpper": true,
                    "stacked": true,
                  }
                }
                options={Array []}
                placeholder="Select a Content Sub Type"
                value={null}
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-lg-6 col-sm-12"
            >
              <InputText
                className="nexus-c-title-create_input"
                formControlOptions={
                  Object {
                    "formControlName": "releaseYear",
                    "rules": Object {
                      "maxLength": Object {
                        "message": "Max release year length is 4!",
                        "value": 4,
                      },
                      "minLength": Object {
                        "message": "Min release year length is 4!",
                        "value": 4,
                      },
                      "pattern": Object {
                        "message": "Please enter a valid year!",
                        "value": /\\^\\[0-9\\]\\+\\$/,
                      },
                      "required": Object {
                        "message": "Field cannot be empty!",
                        "value": true,
                      },
                    },
                  }
                }
                id="titleReleaseYear"
                labelProps={
                  Object {
                    "isRequired": true,
                    "label": "Release Year",
                    "stacked": true,
                  }
                }
                placeholder="Enter Release Year"
              />
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-12"
            >
              <ExternalIDsSection
                control={
                  Object {
                    "_defaultValues": Object {
                      "catalogueOwner": undefined,
                      "contentSubtype": null,
                      "contentType": null,
                      "releaseYear": "",
                      "title": "",
                    },
                    "_executeSchema": [Function],
                    "_fields": Object {},
                    "_formState": Object {
                      "dirtyFields": Object {},
                      "errors": Object {},
                      "isDirty": false,
                      "isSubmitSuccessful": false,
                      "isSubmitted": false,
                      "isSubmitting": false,
                      "isValid": false,
                      "isValidating": false,
                      "submitCount": 0,
                      "touchedFields": Object {},
                    },
                    "_formValues": Object {
                      "catalogueOwner": undefined,
                      "contentSubtype": null,
                      "contentType": null,
                      "releaseYear": "",
                      "title": "",
                    },
                    "_getDirty": [Function],
                    "_getFieldArray": [Function],
                    "_getWatch": [Function],
                    "_names": Object {
                      "array": Set {},
                      "mount": Set {},
                      "unMount": Set {},
                      "watch": Set {},
                    },
                    "_options": Object {
                      "defaultValues": Object {
                        "catalogueOwner": undefined,
                        "contentSubtype": null,
                        "contentType": null,
                        "releaseYear": "",
                        "title": "",
                      },
                      "mode": "all",
                      "reValidateMode": "onChange",
                      "shouldFocusError": true,
                    },
                    "_proxyFormState": Object {
                      "dirtyFields": false,
                      "errors": "all",
                      "isDirty": false,
                      "isValid": "all",
                      "isValidating": false,
                      "touchedFields": false,
                    },
                    "_removeUnmounted": [Function],
                    "_stateFlags": Object {
                      "action": false,
                      "mount": true,
                      "watch": false,
                    },
                    "_subjects": Object {
                      "array": Object {
                        "next": [Function],
                        "observers": Array [],
                        "subscribe": [Function],
                        "unsubscribe": [Function],
                      },
                      "state": Object {
                        "next": [Function],
                        "observers": Array [
                          Object {
                            "next": [Function],
                          },
                        ],
                        "subscribe": [Function],
                        "unsubscribe": [Function],
                      },
                      "watch": Object {
                        "next": [Function],
                        "observers": Array [],
                        "subscribe": [Function],
                        "unsubscribe": [Function],
                      },
                    },
                    "_updateFieldArray": [Function],
                    "_updateValid": [Function],
                    "getFieldState": [Function],
                    "register": [Function],
                    "unregister": [Function],
                  }
                }
                errors={Object {}}
                externalDropdownOptions={Object {}}
                register={[Function]}
              />
            </div>
          </div>
        </div>
      </div>
    </form>
  </Component>
</Dialog>
`;
